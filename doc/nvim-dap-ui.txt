nvim-dap-ui.txt*	A UI for nvim-dap.

==============================================================================
nvim-dap-ui                                                        *nvim-dap-ui*

  Setup........................................................|dapui.setup()|
  Configuration Options.........................................|dapui.config|
  Variable Scopes......................................|dapui.elements.scopes|
  Threads and Stack Frames.............................|dapui.elements.stacks|
  REPL...................................................|dapui.elements.repl|
  Watch Expressions...................................|dapui.elements.watches|
  Breakpoints.....................................|dapui.elements.breakpoints|
  Console.............................................|dapui.elements.console|
  Async Library..................................................|dapui.async|

A UI for nvim-dap which provides a good out of the box configuration.
nvim-dap-ui is built on the idea of "elements". These elements are windows
which provide different features.
Elements are grouped into layouts which can be placed on any side of the
screen. There can be any number of layouts, containing whichever elements
desired.

Elements can also be displayed temporarily in a floating window.

See `:h dapui.setup()` for configuration options and defaults

It is highly recommended to use neodev.nvim to enable type checking for
nvim-dap-ui to get type checking, documentation and autocompletion for
all API functions.

>lua
  require("neodev").setup({
    library = { plugins = { "nvim-dap-ui" }, types = true },
    ...
  })
<

The default icons use codicons(https://github.com/microsoft/vscode-codicons).
It's recommended to use this fork(https://github.com/ChristianChiarulli/neovim-codicons)
which fixes alignment issues for the terminal. If your terminal doesn't
support font fallback and you need to have icons included in your font,
you can patch it via Font Patcher(https://github.com/ryanoasis/nerd-fonts#option-8-patch-your-own-font).
There is a simple step by step guide here: https://github.com/mortepau/codicons.nvim#how-to-patch-fonts.

                                                                 *dapui.setup()*
`setup`({user_config})


Configure nvim-dap-ui
See also ~
|dapui.Config|

Default values:
>lua
  {
    controls = {
      element = "repl",
      enabled = true,
      icons = {
        disconnect = "",
        pause = "",
        play = "",
        run_last = "",
        step_back = "",
        step_into = "",
        step_out = "",
        step_over = "",
        terminate = ""
      }
    },
    element_mappings = {},
    expand_lines = true,
    floating = {
      border = "single",
      mappings = {
        close = { "q", "<Esc>" }
      }
    },
    force_buffers = true,
    icons = {
      collapsed = "",
      current_frame = "",
      expanded = ""
    },
    layouts = { {
        elements = { {
            id = "scopes",
            size = 0.25
          }, {
            id = "breakpoints",
            size = 0.25
          }, {
            id = "stacks",
            size = 0.25
          }, {
            id = "watches",
            size = 0.25
          } },
        position = "left",
        size = 40
      }, {
        elements = { {
            id = "repl",
            size = 0.5
          }, {
            id = "console",
            size = 0.5
          } },
        position = "bottom",
        size = 10
      } },
    mappings = {
      edit = "e",
      expand = { "<CR>", "<2-LeftMouse>" },
      open = "o",
      remove = "d",
      repl = "r",
      toggle = "t"
    },
    render = {
      indent = 1,
      max_value_lines = 100
    }
  }
<
Parameters~
{user_config?} `(dapui.Config)`

Type ~
`(table<string, dapui.Element>)`

Type ~
dapui.Element

                                                        *dapui.FloatElementArgs*
Fields~
{width} `(integer)` Fixed width of window
{height} `(integer)` Fixed height of window
{enter} `(boolean)` Whether or not to enter the window after opening

                                                         *dapui.float_element()*
`float_element`({elem_name}, {args})

Open a floating window containing the desired element.

If no fixed dimensions are given, the window will expand to fit the contents
of the buffer.
Parameters~
{elem_name} `(string)`
{args?} `(dapui.FloatElementArgs)`

                                                                *dapui.EvalArgs*
Fields~
{context} `(string)` Context to use for evalutate request, defaults to
"hover". Hover requests should have no side effects, if you have errors
with evaluation, try changing context to "repl". See the DAP specification
for more details.
{width} `(integer)` Fixed width of window
{height} `(integer)` Fixed height of window
{enter} `(boolean)` Whether or not to enter the window after opening

                                                                  *dapui.eval()*
`eval`({expr}, {args})

Open a floating window containing the result of evaluting an expression

If no fixed dimensions are given, the window will expand to fit the contents
of the buffer.
Parameters~
{expr?} `(string)` Expression to evaluate. If nil, then in normal more the
current word is used, and in visual mode the currently highlighted text.
{args?} `(dapui.EvalArgs)`

                                                         *dapui.update_render()*
`update_render`({update})

Update the config.render settings and re-render windows
Parameters~
{update} `(dapui.Config.render)` Updated settings, from the `render` table of
the config

                                                               *dapui.CloseArgs*
Fields~
{layout?} `(number)` Index of layout in config

                                                                 *dapui.close()*
`close`({args})

Close one or all of the window layouts
Parameters~
{args?} `(dapui.CloseArgs)`

                                                                *dapui.OpenArgs*
Fields~
{layout?} `(number)` Index of layout in config
{reset?} `(boolean)` Reset windows to original size

                                                                  *dapui.open()*
`open`({args})

Open one or all of the window layouts
Parameters~
{args?} `(dapui.OpenArgs)`

                                                              *dapui.ToggleArgs*
Fields~
{layout?} `(number)` Index of layout in config
{reset?} `(boolean)` Reset windows to original size

                                                                *dapui.toggle()*
`toggle`({args})

Toggle one or all of the window layouts.
Parameters~
{args?} `(dapui.ToggleArgs)`

dapui.elements                                                  *dapui.elements*


Access the elements currently registered. See elements corresponding help
tag for API information.

Fields~
{hover} `(dapui.elements.hover)`
{breakpoints} `(dapui.elements.breakpoints)`
{repl} `(dapui.elements.repl)`
{scopes} `(dapui.elements.scopes)`
{stack} `(dapui.elements.stacks)`
{watches} `(dapui.elements.watches)`
{console} `(dapui.elements.console)`

                                                                 *dapui.Element*
Fields~
{render} `(fun())` Triggers the element to refresh its buffer. Used when
render settings have changed
{buffer} `(fun(): integer)` Gets the current buffer for the element. The
buffer can change over repeated calls
{float_defaults?} `(fun(): dapui.FloatElementArgs)` Default settings for
floating windows. Useful for element windows which should be larger than
their content

                                                      *dapui.register_element()*
`register_element`({name}, {element})

Registers a new element that can be used within layouts or floating windows
Parameters~
{name} `(string)` Name of the element
{element} `(dapui.Element)`


==============================================================================
dapui.config                                                      *dapui.config*

                                                                  *dapui.Config*
Fields~
{icons} `(dapui.Config.icons)`
{mappings} `(table<dapui.Action, string|string[]>)` Keys to trigger actions in elements
{element_mappings} `(table<string, table<dapui.Action, string|string[]>>)` Per-element overrides of global mappings
{expand_lines} `(boolean)` Expand current line to hover window if larger
than window size
{force_buffers} `(boolean)` Prevents other buffers being loaded into
nvim-dap-ui windows
{layouts} `(dapui.Config.layout[])` Layouts to display elements within.
Layouts are opened in the order defined
{floating} `(dapui.Config.floating)` Floating window specific options
{controls} `(dapui.Config.controls)` Controls configuration
{render} `(dapui.Config.render)` Rendering options which can be updated
after initial setup
{select_window?} `(fun(): integer)` A function which returns a window to be
used for opening buffers such as a stack frame location.

                                                            *dapui.Config.icons*
Fields~
{expanded} `(string)`
{collapsed} `(string)`
{current_frame} `(string)`

                                                           *dapui.Config.layout*
Fields~
{elements} `(string[]|dapui.Config.layout.element[])` Elements to display
in this layout
{size} `(number)` Size of the layout in lines/columns
{position} `("left"|"right"|"top"|"bottom")` Which side of editor to open
layout on

                                                   *dapui.Config.layout.element*
Fields~
{id} `(string)` Element ID
{size} `(number)` Size of the element in lines/columns or as proportion of
total editor size (0-1)

                                                         *dapui.Config.floating*
Fields~
{max_height?} `(number)` Maximum height of floating window (integer or float
between 0 and 1)
{max_width?} `(number)` Maximum width of floating window (integer or float
between 0 and 1)
{border} `(string|string[])` Border argument supplied to `nvim_open_win`
{mappings} `(table<dapui.FloatingAction, string|string[]>)` Keys to trigger
actions in elements

                                                         *dapui.Config.controls*
Fields~
{enabled} `(boolean)` Show controls on an element (requires winbar feature)
{element} `(string)` Element to show controls on
{icons} `(dapui.Config.controls.icons)`

                                                   *dapui.Config.controls.icons*
Fields~
{pause} `(string)`
{play} `(string)`
{step_into} `(string)`
{step_over} `(string)`
{step_out} `(string)`
{step_back} `(string)`
{run_last} `(string)`
{terminate} `(string)`

                                                           *dapui.Config.render*
Fields~
{indent} `(integer)` Default indentation size
{max_type_length?} `(integer)` Maximum number of characters to allow a type
name to fill before trimming
{max_value_lines?} `(integer)` Maximum number of lines to allow a value to
fill before trimming

                                                                  *dapui.Action*
Alias~
`dapui.Action` → `"expand"|"open"|"remove"|"edit"|"repl"|"toggle"`

                                                          *dapui.FloatingAction*
Alias~
`dapui.FloatingAction` → `"close"`


==============================================================================
dapui.elements.scopes                                    *dapui.elements.scopes*

Displays the available scopes and variables within them.

Mappings:
- `edit`: Edit the value of a variable
- `expand`: Toggle showing any children of variable.
- `repl`: Send variable to REPL


==============================================================================
dapui.elements.stacks                                    *dapui.elements.stacks*

Displays the running threads and their stack frames.

Mappings:
- `open`: Jump to a place within the stack frame.
- `toggle`: Toggle displaying subtle frames


==============================================================================
dapui.elements.repl                                        *dapui.elements.repl*

The REPL provided by nvim-dap.


==============================================================================
dapui.elements.watches                                  *dapui.elements.watches*

Allows creation of expressions to watch the value of in the context of the
current frame.
This uses a prompt buffer for input. To enter a new expression, just enter
insert mode and you will see a prompt appear. Press enter to submit

Mappings:

- `expand`: Toggle showing the children of an expression.
- `remove`: Remove the watched expression.
- `edit`: Edit an expression or set the value of a child variable.
- `repl`: Send expression to REPL

                                                  *dapui.elements.watches.add()*
`add`({expr})

Add a new watch expression
Parameters~
{expr?} `(string)`

                                                 *dapui.elements.watches.edit()*
`edit`({index}, {new_expr})

Change the chosen watch expression
Parameters~
{index} `(integer)`
{new_expr} `(string)`

                                               *dapui.elements.watches.remove()*
`remove`({index})

Remove the chosen watch expression

                                                  *dapui.elements.watches.get()*
`get`()

Get the current list of watched expressions
Return~
`(dapui.elements.watches.Watch[])`

                                                  *dapui.elements.watches.Watch*
Fields~
{expression} `(string)`
{expanded} `(boolean)`

                                        *dapui.elements.watches.toggle_expand()*
`toggle_expand`({index})

Toggle the expanded state of the chosen watch expression
Parameters~
{index} `(integer)`


==============================================================================
dapui.elements.breakpoints                          *dapui.elements.breakpoints*

Lists all breakpoints currently set.

Mappings:
- `open`: Jump to the location the breakpoint is set
- `toggle`: Enable/disable the selected breakpoint


==============================================================================
dapui.elements.console                                  *dapui.elements.console*

The console window used by nvim-dap for the integrated terminal.


==============================================================================
dapui.async                                                        *dapui.async*


The API is heavily inspired by Python's asyncio module and is currently
experimental meaning that interfaces may change without warning.
Users of nvim-dap-ui should not need to use this module directly.

                                                             *dapui.async.run()*
`run`({func}, {cb})

Run a function in an async context. This is the entrypoint to all async
functionality.
>lua
  local async = require("dapui").async
  async.run(function()
    async.sleep(10)
    print("Hello world")
  end)
<
Parameters~
{func} `(function)`
Return~
`(dapui.async.tasks.Task)`

                                                            *dapui.async.wrap()*
`wrap`({func}, {argc})

Creates an async function with a callback style function.
>lua
  local async = require("dapui").async
  local sleep = async.wrap(function(ms, cb)
    vim.defer_fn(cb, ms)
  end, 2)

  async.run(function()
    sleep(10)
    print("Slept for 10ms")
  end)
<
Parameters~
{func} `(function)` A callback style function to be converted. The last argument must be the callback.
{argc} `(integer)` The number of arguments of func. Must be included.
Return~
`(function)` Returns an async function

                                                          *dapui.async.gather()*
`gather`({functions})

Run a collection of async functions concurrently and return when
all have finished.
If any of the functions fail, all pending tasks will be cancelled and the
error will be re-raised

Parameters~
{functions} `(function[])`
Return~
`(any[][])` Packed results of all functions

                                                           *dapui.async.first()*
`first`({functions})

Run a collection of async functions concurrently and return the result of
the first to finish.

Parameters~
{functions} `(function[])`
Return~
`(any)`

                                                           *dapui.async.sleep()*
`sleep`({ms})

Suspend the current task for given time.
Parameters~
{ms} `(number)` Time in milliseconds

                                                       *dapui.async.scheduler()*
`scheduler`()

Yields to the Neovim scheduler to be able to call the API.


dapui.async.api                                                *dapui.async.api*

Safely proxies calls to the vim.api module while in an async context.

dapui.async.fn                                                  *dapui.async.fn*

Safely proxies calls to the vim.fn module while in an async context.

Async versions of vim.ui functions


==============================================================================
dapui.async.control                                        *dapui.async.control*


Provides primitives for flow control to be used in async functions


An event can signal to multiple listeners to resume execution
The event can be set from a non-async context.
                                                     *dapui.async.control.Event*
Fields~
{set} `(fun(max_woken?: integer): nil)` Set the event and signal to all (or limited number of) listeners that the event has occurred. If max_woken is provided and there are more listeners then the event is cleared immediately
{wait} `(async fun(): nil)` Wait for the event to occur, returning immediately if
already set
{clear} `(fun(): nil)` Clear the event
{is_set} `(fun(): boolean)` Returns true if the event is set

                                                   *dapui.async.control.event()*
`event`()

Create a new event
Return~
`(dapui.async.control.Event)`


An future represents a value that will be available in the future.
The future result can be set from a non-async context.
                                                    *dapui.async.control.Future*
Fields~
{set} `(fun(value): nil)` Set the future value and wake all waiters.
{set_error} `(fun(message): nil)` Set the error for this future to raise to
waiters
{wait} `(async fun(): any)` Wait for the value to be set, returning immediately if already set

                                                  *dapui.async.control.future()*
`future`()

Create a new future
Return~
`(dapui.async.control.Future)`


A FIFO queue with async support.
                                                     *dapui.async.control.Queue*
Fields~
{size} `(fun(): number)` Returns the number of items in the queue
{max_size} `(fun(): number|nil)` Returns the maximum number of items in the queue
{get} `(async fun(): any)` Get a value from the queue, blocking if the queue is empty
{get_nowait} `(fun(): any)` Get a value from the queue, erroring if queue is empty.
{put} `(async fun(value: any): nil)` Put a value into the queue
{put_nowait} `(fun(value: any): nil)` Put a value into the queue, erroring if queue is full.

                                                   *dapui.async.control.queue()*
`queue`({max_size})

Create a new queue
Parameters~
{max_size?} `(integer)` The maximum number of items in the queue, defaults to no limit
Return~
`(dapui.async.control.Queue)`


An async semaphore that allows up to a given number of acquisitions.
                                                 *dapui.async.control.Semaphore*
Fields~
{with} `(async fun(callback: fun(): nil): nil)` Run the callback with the semaphore acquired

                                               *dapui.async.control.semaphore()*
`semaphore`({value})

Create a new semaphore
Parameters~
{value} `(integer)` The number of allowed concurrent acquisitions


==============================================================================
dapui.async.uv                                                  *dapui.async.uv*


Provides asynchronous versions of vim.loop functions.
See corresponding function documentation for parameter and return
information.

Fields~
{close} `(async fun(handle: dapui.async.uv.Handle))`
{fs_open} `(async fun(path: any, flags: any, mode: any): (string|nil,integer|nil))`
{fs_read} `(async fun(fd: integer, size: integer, offset?: integer): (string|nil,string|nil))`
{fs_close} `(async fun(fd: integer): (string|nil,boolean|nil))`
{fs_unlink} `(async fun(path: string): (string|nil,boolean|nil))`
{fs_write} `(async fun(fd: any, data: any, offset?: any): (string|nil,integer|nil))`
{fs_mkdir} `(async fun(path: string, mode: integer): (string|nil,boolean|nil))`
{fs_mkdtemp} `(async fun(template: string): (string|nil,string|nil))`
{fs_rmdir} `(async fun(path: string): (string|nil,boolean|nil))`
{fs_stat} `(async fun(path: string): (string|nil,dapui.async.uv.Stat|nil))`
{fs_fstat} `(async fun(fd: integer): (string|nil,dapui.async.uv.Stat|nil))`
{fs_lstat} `(async fun(path: string): (string|nil,dapui.async.uv.Stat|nil))`
{fs_statfs} `(async fun(path: string): (string|nil,dapui.async.uv.StatFs|nil))`
{fs_rename} `(async fun(old_path: string, new_path: string): (string|nil,boolean|nil))`
{fs_fsync} `(async fun(fd: integer): (string|nil,boolean|nil))`
{fs_fdatasync} `(async fun(fd: integer): (string|nil,boolean|nil))`
{fs_ftruncate} `(async fun(fd: integer, offset: integer): (string|nil,boolean|nil))`
{fs_sendfile} `(async fun(out_fd: integer, in_fd: integer, in_offset: integer, length: integer): (string|nil,integer|nil))`
{fs_access} `(async fun(path: string, mode: integer): (string|nil,boolean|nil))`
{fs_chmod} `(async fun(path: string, mode: integer): (string|nil,boolean|nil))`
{fs_fchmod} `(async fun(fd: integer, mode: integer): (string|nil,boolean|nil))`
{fs_utime} `(async fun(path: string, atime: number, mtime: number): (string|nil,boolean|nil))`
{fs_futime} `(async fun(fd: integer, atime: number, mtime: number): (string|nil,boolean|nil))`
{fs_link} `(async fun(path: string, new_path: string): (string|nil,boolean|nil))`
{fs_symlink} `(async fun(path: string, new_path: string, flags?: integer): (string|nil,boolean|nil))`
{fs_readlink} `(async fun(path: string): (string|nil,string|nil))`
{fs_realpath} `(async fun(path: string): (string|nil,string|nil))`
{fs_chown} `(async fun(path: string, uid: integer, gid: integer): (string|nil,boolean|nil))`
{fs_fchown} `(async fun(fd: integer, uid: integer, gid: integer): (string|nil,boolean|nil))`
{fs_lchown} `(async fun(path: string, uid: integer, gid: integer): (string|nil,boolean|nil))`
{fs_copyfile} `(async fun(path: any, new_path: any, flags?: any): (string|nil,boolean|nil))`
{fs_opendir} `(async fun(path: string, entries?: integer): (string|nil,dapui.async.uv.Dir|nil))`
{fs_readdir} `(async fun(dir: dapui.async.uv.Dir): (string|nil,dapui.async.uv.DirEntry[]|nil))`
{fs_closedir} `(async fun(dir: dapui.async.uv.Dir): (string|nil,boolean|nil))`
{fs_scandir} `(async fun(path: string): (string|nil,dapui.async.uv.DirEntry[]|nil))`
{shutdown} `(async fun(stream: dapui.async.uv.Stream): string|nil)`
{listen} `(async fun(stream: dapui.async.uv.Stream, backlog: integer): string|nil)`
{write} `(async fun(stream: dapui.async.uv.Stream, data: string|string[]): string|nil)`
{write2} `(async fun(stream: dapui.async.uv.Stream, data: string|string[], send_handle: dapui.async.uv.Stream): string|nil)`

                                                         *dapui.async.uv.Handle*

                                                         *dapui.async.uv.Stream*
Inherits: `dapui.async.uv.Handle`


                                                           *dapui.async.uv.Stat*
Fields~
{dev} `(integer)`
{mode} `(integer)`
{nlink} `(integer)`
{uid} `(integer)`
{gid} `(integer)`
{rdev} `(integer)`
{ino} `(integer)`
{size} `(integer)`
{blksize} `(integer)`
{blocks} `(integer)`
{flags} `(integer)`
{gen} `(integer)`
{atime} `(dapui.async.uv.StatTime)`
{mtime} `(dapui.async.uv.StatTime)`
{ctime} `(dapui.async.uv.StatTime)`
{birthtime} `(dapui.async.uv.StatTime)`
{type} `(string)`

                                                       *dapui.async.uv.StatTime*
Fields~
{sec} `(integer)`
{nsec} `(integer)`

                                                         *dapui.async.uv.StatFs*
Fields~
{type} `(integer)`
{bsize} `(integer)`
{blocks} `(integer)`
{bfree} `(integer)`
{bavail} `(integer)`
{files} `(integer)`
{ffree} `(integer)`

                                                            *dapui.async.uv.Dir*

                                                       *dapui.async.uv.DirEntry*


==============================================================================
dapui.async.ui                                                  *dapui.async.ui*


Async versions of vim.ui functions.

                                                        *dapui.async.ui.input()*
`input`({args})


Parameters~
{args} `(dapui.async.ui.InputArgs)`

                                                      *dapui.async.ui.InputArgs*
Fields~
{prompt} `(string|nil)` Text of the prompt
{default} `(string|nil)` Default reply to the input
{completion} `(string|nil)` Specifies type of completion supported for input. Supported types are the same that can be supplied to a user-defined command using the "-complete=" argument. See |:command-completion|
{highlight} `(function)` Function that will be used for highlighting user inputs.

                                                       *dapui.async.ui.select()*
`select`({items}, {args})


Parameters~
{items} `(any[])`
{args} `(dapui.async.ui.SelectArgs)`

                                                     *dapui.async.ui.SelectArgs*
Fields~
{prompt} `(string|nil)` Text of the prompt. Defaults to `Select one of:`
{format_item} `(function|nil)` Function to format an individual item from `items`. Defaults to `tostring`.
{kind} `(string|nil)` Arbitrary hint string indicating the item shape. Plugins reimplementing `vim.ui.select` may wish to use this to infer the structure or semantics of `items`, or the context in which select() was called.


==============================================================================
dapui.async.tests                                            *dapui.async.tests*


Async versions of plenary's test functions.

                                                        *dapui.async.tests.it()*
`it`({name}, {async_func})

Parameters~
{name} `(string)`
{async_func} `(function)`

                                               *dapui.async.tests.before_each()*
`before_each`({async_func})

Parameters~
{async_func} `(function)`

                                                *dapui.async.tests.after_each()*
`after_each`({async_func})

Parameters~
{async_func} `(function)`


 vim:tw=78:ts=8:noet:ft=help:norl: